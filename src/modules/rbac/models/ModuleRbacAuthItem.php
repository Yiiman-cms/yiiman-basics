<?php

namespace YiiMan\YiiBasics\modules\rbac\models;

use Yii;

use yii\db\ActiveRecord;

/**
 * This is the model class for table "{{%module_rbac_auth_item}}".
 *
 * @property string $name
 * @property int $type
 * @property string $description
 * @property string $rule_name
 * @property resource $data
 * @property int $created_at
 * @property int $updated_at
 * @property string $module_en
 * @property string $module_fa
 *
 * @property RbacAuthAssignment[] $rbacAuthAssignments
 * @property RbacAuthRule $ruleName
 * @property RbacAuthItemChild[] $rbacAuthItemChildren
 * @property RbacAuthItemChild[] $rbacAuthItemChildren0
 * @property ModuleRbacAuthItem[] $children
 * @property ModuleRbacAuthItem[] $parents
 */
class ModuleRbacAuthItem extends ActiveRecord
{
    const TYPE_ROLE = 1;
    const TYPE_PERMISSION = 2;


    public $permissions;

    /**
     * {@inheritdoc}
     */
    public static function tableName()
    {
        return '{{%module_rbac_auth_item}}';
    }

    /**
     * {@inheritdoc}
     */
    public function rules()
    {
        return [
            [['name', 'type'], 'required'],
            [['type', 'created_at', 'updated_at'], 'integer'],
            [['description', 'data'], 'string'],
            [['name', 'rule_name'], 'string', 'max' => 64],
            [['module_en', 'module_fa'], 'string', 'max' => 255],
            [['name'], 'unique'],
            [['permissions'], 'safe'],
            [['rule_name'], 'exist', 'skipOnError' => true, 'targetClass' => \YiiMan\YiiBasics\modules\rbac\models\ModuleRbacAuthRule::className(), 'targetAttribute' => ['rule_name' => 'name']],
        ];
    }

    /**
     * {@inheritdoc}
     */
    public function attributeLabels()
    {
        return [
            'name' => Yii::t('rbac', 'Name'),
            'type' => Yii::t('rbac', 'Type'),
            'description' => Yii::t('rbac', 'Description'),
            'rule_name' => Yii::t('rbac', 'Rule Name'),
            'ruleName' => Yii::t('rbac', 'Rule Name'),
            'data' => Yii::t('rbac', 'Data'),
            'created_at' => Yii::t('rbac', 'Created At'),
            'updated_at' => Yii::t('rbac', 'Updated At'),
            'module_en' => Yii::t('rbac', 'Module En'),
            'module_fa' => Yii::t('rbac', 'Module Fa'),
        ];
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getRbacAuthAssignments()
    {
        return $this->hasMany(ModuleRbacAuthAssignment::className(), ['item_name' => 'name']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getRuleName()
    {
        return $this->hasOne(ModuleRbacAuthRule::className(), ['name' => 'rule_name']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getRbacAuthItemChildren()
    {
        return $this->hasMany(ModuleRbacAuthItemChild::className(), ['parent' => 'name']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getRbacAuthItemChildren0()
    {
        return $this->hasMany(ModuleRbacAuthItemChild::className(), ['child' => 'name']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getChildren()
    {
        return $this->hasMany(ModuleRbacAuthItem::className(), ['name' => 'child'])->viaTable('{{%module_rbac_auth_item_child}}', ['parent' => 'name']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getParents()
    {
        return $this->hasMany(ModuleRbacAuthItem::className(), ['name' => 'parent'])->viaTable('{{%module_rbac_auth_item_child}}', ['child' => 'name']);
    }


    public function save($runValidation = true, $attributeNames = null)
    {
        $this->type = self::TYPE_ROLE ;
        empty($this->created_at)??$this->created_at = date('Y-m-d H:i:s');
        $save = parent::save($runValidation, $attributeNames); // TODO: Change the autogenerated stub
        if ($save) {
            $post = $_POST;

            $model = ModuleRbacAuthItemChild::find()->where(['parent' => $this->name])->all();
            if (!empty($model)) {
                foreach ($model as $m) {
                    $m->delete();
                }
            }

            if (!empty($post['ModuleRbacAuthItem']['permissions'])) {
                foreach ($post['ModuleRbacAuthItem']['permissions'] as $per) {
                    $model = new ModuleRbacAuthItemChild();
                    $model->parent = $this->name;
                    $model->child = $per;
                    $model->save();
                }
            }
        }
        return $save;
    }

    public function load($data, $formName = null)
    {
        $load = parent::load($data, $formName); // TODO: Change the autogenerated stub

        $model = ModuleRbacAuthItemChild::find()->where(['parent' => $this->name])->asArray()->all();
        if (!empty($model)) {
            foreach ($model as $m) {
                $this->permissions[$m['child']] = $m['child'];
            }
        }

        return $load;
    }
}
