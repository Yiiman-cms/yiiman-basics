<?php
/**
 * Copyright (c) 2022-2022.
 * Created by YiiMan.
 * Programmer: gholamreza beheshtian
 * Mobile:+989353466620 | +17272282283
 * Site:https://yiiman.ir
 */

/**
 * Created by YiiMan TM.
 * Programmer: gholamreza beheshtian
 * Mobile:+989353466620 | +17272282283
 * Site:https://yiiman.ir
 * Date: 7/30/2018
 * Time: 7:45 PM
 */

namespace YiiMan\YiiBasics\lib;


use common\models\Homes;
use Exception;
use Yii;
use yii\base\Component;

/**
 * Class Object
 * @package YiiMan\YiiBasics\lib
 * @property \YiiMan\Setting\module\components\Options $options
 */
class Object1 extends Component
{

    /**
     * you should set this parameter equal common\Homes model for give packed user data from this class in global
     * if not set this parameterT then this parameter will be set equal common\model\Applicant and find logged in user
     * @var $model \common\models\Homes
     */
    public $model;

    /**
     * this attribute will save unpacked other column data in Home table
     * @var $object
     */
    public $object;

    /**
     * will set upload dir
     * @var $uploadDir string
     */
    public $uploadDir;

    /**
     * global upload url
     * @var $uploadUrl string
     */
    public $uploadUrl;

    public $options;

    public $baseUrl;

    public function init()
    {
        parent::init(); // TODO: Change the autogenerated stub


        if (empty($this->uploadDir)) {
            $this->uploadDir = realpath(__DIR__.'/../../../upload/');
        }
        if (empty($this->uploadUrl)) {
            $this->uploadUrl = 'http://'.$_SERVER['HTTP_HOST'].'/upload';
        }

        if (empty($this->baseUrl)) {
            $this->baseUrl = 'http://'.$_SERVER['HTTP_HOST'];
        }

        /* < UnpackData > */
        {
            if (!empty($this->model->other)) {
                $pack = json_decode($this->model->other);
                $this->object = [];
                foreach ($pack as $property => $value) {
                    $this->object[$property] = $value;
                }
                $this->object = (object) $this->object;
            }

        }
        /* </ UnpackData > */

        $this->options = \Yii::$app->Options;

    }

    public function save()
    {


        $pack = json_encode(get_object_vars($this));


        $this->model->other = $pack;


        $this->model->save();
    }

    public function __isset($name)
    {
        return $this->__get($name);
    }

    public function __get($name)
    {
        if (empty($this->$name)) {
            if (!empty($this->object->$name)) {
                return $this->object->$name;
            } else {
                if (!empty($this->model->$name)) {
                    return $this->model->$name;
                } else {

                    $getter = 'get'.$name;
                    if (method_exists($this, $getter)) {
                        return $this->$getter();
                    }
                }
            }

            return $this->$name = '';
        } else {
            if (is_float($this->{$name})) {
                return round($this->{$name}, 2);
            } else {
                return $this->$name;
            }
        }
    }

    /**
     * @param  string  $name
     * @param  mixed   $value
     * @throws \yii\base\UnknownPropertyException
     */
    public function __set($name, $value)
    {
        if ($this->hasProperty($name)) {
            $this->$name = $value;
        } else {
            $this->setAttribute($name, $value);
        }


    }

    public function setAttribute($AttributeName, $value)
    {
        if (empty($this->object)) {
            $this->object = (object) [];
        }
        $this->object->$AttributeName = $value;
    }

    /**
     * تاریخ ثبت  را به صورت شمسی بازگردانی میکند
     * یا اگر تاریخ خیلی نزدیک به امروز است، آن را به صورت فارسی و ساده بیان می نماید
     * @param  boolean  $isText  اگر این متغیر صحی باشد، زمان را به صورت دیروز، هفته ی پیش و ... نمایش میدهد و اگر غلط باشد، زمان را به صورت تاریخ شمسی نشان میدهد.
     *                           this function just will work in object class and must exist "created_at" attribute in $this->model
     *                           that is  main must exist $this->>model->created_at attribute for work this function with that
     * @return string
     */
    public function shamsiDate($isText)
    {
        if ($isText) {
            $today = date("Y-m-d");
            $diff = date_diff(date_create($this->model->created_at), date_create($today));
            $diff = $diff->format('%d');
            if ($diff == 0) {
                return 'امروز';
            }
            if ($diff == 1) {
                return 'دیروز';
            }
            if ($diff == 2) {
                return 'پریروز';
            }
            if ($diff > 2 && $diff < 7) {
                $day = '';
                switch ($diff) {
                    case 3:
                        $day = 'سه';
                        break;
                    case 4:
                        $day = 'چهار';
                        break;
                    case 5:
                        $day = 'پنج';
                        break;
                    case 6:
                        $day = 'شش';
                }
                return $day.' '.'روز قبل';
            }

            if ($diff > 7 && $diff < 14) {
                return 'هفته ی گذشته';
            }
            if ($diff > 14 && $diff < 24) {
                return 'دو هفته ی قبل';
            }
            if ($diff > 24 && $diff < 31) {
                return 'سه هفته قبل';
            }
            if ($diff > 31 && $diff < 60) {
                return 'یک ماه قبل';
            }
            return Yii::$app->functions->convertdate($this->model->created_at);
        } else {
            return Yii::$app->functions->convertdate($this->model->created_at);
        }

    }

    /**
     * @param  string                $attributeName
     * @param  \common\models\Users  $model
     * @param  string                $folderName  \
     * @param  string                $fileName
     * @return string fileName
     */
    protected function getFile($attributeName, $model, $folderName, $fileName = null)
    {
        $file = UploadedFile::getInstance($model, $attributeName);
        if (empty($fileName)) {
            $fileName = $this->hash.'-res.'.$file->extension;
        } else {
            $fileName = $fileName.'.'.$file->extension;
        }

        /* < Make Folder if not exist > */
        {
            $folder = $this->uploadDir.'/'.$folderName."/";

            if (!file_exists($folder)) {
                mkdir($this->uploadDir.'/'.$folderName, 0777);
            }
        }
        /* </ Make Folder if not exist > */

        /**
         * @var $model Users
         */
        $file->saveAs($this->uploadDir.'/'.$folderName.'/'.$fileName);
        switch ($file->error) {
            case UPLOAD_ERR_OK:

                $attr = $this->{$attributeName};
                if (!empty($attr)) {
                    if (file_exists($this->uploadDir.'/'.$this->{$attributeName})) {
                        unlink($this->uploadDir.'/'.$this->{$attributeName});
                    }
                }
                break;
            case UPLOAD_ERR_NO_FILE:
                throw new \RuntimeException('No file sent.');
            case UPLOAD_ERR_INI_SIZE:
            case UPLOAD_ERR_FORM_SIZE:
                throw new \RuntimeException('Exceeded filesize limit.');
            case UPLOAD_ERR_PARTIAL:
                throw new \RuntimeException('Exceeded maximum upload size.');
            default:
                throw new \RuntimeException('Unknown errors.');
                break;
        }

        $this->setAttribute($attributeName, $fileName);
        $this->update($model);
        return $fileName;
    }

    public function update($user)
    {
        $post = \Yii::$app->request->post();

        $this->model->save();
    }

    /**
     * @param  string                $attributeName
     * @param  \common\models\Users  $model
     * @param  string                $folderName
     */
    protected function getFiles($attributeName, $model, $folderName)
    {
        $file = UploadedFile::getInstances($model, $attributeName);


        /* < Make Folder if not exist > */
        {
            $folder = $this->uploadDir.'/'.$folderName."/";

            if (!file_exists($folder)) {
                mkdir($this->uploadDir.'/'.$folderName, 0777);
            }
        }
        /* </ Make Folder if not exist > */

        /**
         * @var $model Users
         */
        if (!empty($file)) {
            $FileArray = [];
            foreach ($file as $key => $f) {
                $f->saveAs($this->uploadDir.'/'.$folderName.'/'.$f->name);
                switch ($f->error) {
                    case UPLOAD_ERR_OK:
                        break;
                    case UPLOAD_ERR_NO_FILE:
                        throw new \RuntimeException('No file sent.');
                    case UPLOAD_ERR_INI_SIZE:
                    case UPLOAD_ERR_FORM_SIZE:
                        throw new \RuntimeException('Exceeded filesize limit.');
                    case UPLOAD_ERR_PARTIAL:
                        throw new \RuntimeException('Exceeded maximum upload size.');
                    default:
                        throw new \RuntimeException('Unknown errors.');
                        break;
                }
                $FileArray[] = $f->name;
            }
            $oldFiles = \Yii::$app->Applicant->{$attributeName};

            if (!empty($oldFiles)) {
                $FileArray = ArrayHelper::merge($FileArray, $oldFiles);
            }
            $this->setAttribute($attributeName, $FileArray);
            $this->update($model);
        }


    }

    /**
     * this function will pack Applicant->other objects to json and will return json data
     * @return null|string
     */
    protected function packObject()
    {
        if (!empty($this->object)) {


            return json_encode($this->object);
        } else {
            return null;
        }
    }

}
